<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JS on 飞舞的尘埃</title>
    <link>/tags/js/</link>
    <description>Recent content in JS on 飞舞的尘埃</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 30 Apr 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shiny display pdf file</title>
      <link>/note/2018/04/30/shiny-display-pdf-file/</link>
      <pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/note/2018/04/30/shiny-display-pdf-file/</guid>
      <description>使用pdf.js来使用在web页面中阅读PDF文件，同时禁止下载、打水印的功能
 PDF.JS 参考 PDF.js 在线pdf阅读插件（禁止打印，下载，每页水印）修改对应代码（JS/HTML）
shiny web  将修改测试无误的pdf.js保存在shiny项目的www路径下  └── www └── pdfView └── generic ├── build └── web ├── cmaps ├── images └── locale   Shiny app代码  library(shiny) # Define UI for application that draws a histogram ui &amp;lt;- fluidPage( # Application title titlePanel(&amp;quot;pdf view&amp;quot;), # Sidebar with a slider input for number of bins uiOutput(&amp;quot;iframe_source&amp;quot;) ) server &amp;lt;- function(input, output) { output$iframe_source &amp;lt;- renderUI({ iframe_source = tags$iframe( src=sprintf(&amp;quot;pdfView/generic/web/viewer.</description>
    </item>
    
    <item>
      <title>recharts在shiny中的显示问题</title>
      <link>/note/2018/03/16/shiny-display-recharts/</link>
      <pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/note/2018/03/16/shiny-display-recharts/</guid>
      <description>在shiny中使用recharts时，出现不能正常显示的问题：ePlot生成的R对象在shiny中可以显示；但是其他画图函数如:eBar、eBmap、eCandle等生成的对象不能正常显示。比较两类对象的差异发现在参数dependencies的设置上存在差异，通过修改变量可以正常显示，应该是依赖的一个bug。后续再查源码…..
 ePlot函数画图 Create rEcharts from an R object，直接使用ePlot函数画图可以正常显示
library(recharts) # 定义数据部分 series = list(list( name = &amp;#39;Sales&amp;#39;, type = &amp;#39;bar&amp;#39;, data = c(5, 20, 36, 10, 10, 20) )) # 定义坐标轴部分 ext = list( xAxis = list(list( data = c(&amp;#39;shirt&amp;#39;,&amp;#39;cardign&amp;#39;,&amp;#39;chiffon shirt&amp;#39;,&amp;#39;pants&amp;#39;,&amp;#39;heels&amp;#39;,&amp;#39;socks&amp;#39;) )), yAxis = list(list()) ) # 绘制 e1 = ePlot(series, ext) e1  {&#34;x&#34;:{&#34;legend&#34;:{&#34;show&#34;:true,&#34;orient&#34;:&#34;horizontal&#34;,&#34;x&#34;:&#34;left&#34;,&#34;y&#34;:&#34;top&#34;,&#34;data&#34;:[&#34;Sales&#34;]},&#34;title&#34;:{&#34;text&#34;:&#34;&#34;,&#34;subtext&#34;:&#34;&#34;,&#34;x&#34;:&#34;center&#34;,&#34;y&#34;:&#34;top&#34;},&#34;calculable&#34;:true,&#34;theme&#34;:&#34;default&#34;,&#34;tooltip&#34;:{&#34;show&#34;:true,&#34;trigger&#34;:&#34;item&#34;,&#34;formatter&#34;:&#34;{a} {b} : {c}&#34;},&#34;series&#34;:[{&#34;name&#34;:&#34;Sales&#34;,&#34;type&#34;:&#34;bar&#34;,&#34;data&#34;:[5,20,36,10,10,20]}],&#34;xAxis&#34;:[{&#34;data&#34;:[&#34;shirt&#34;,&#34;cardign&#34;,&#34;chiffon shirt&#34;,&#34;pants&#34;,&#34;heels&#34;,&#34;socks&#34;]}],&#34;yAxis&#34;:[[]]},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}  eBar函数画图 Create an HTML bar charts widget using the ECharts(version:3.</description>
    </item>
    
    <item>
      <title>python爬虫:网页重定向问题</title>
      <link>/note/2018/03/05/crawler-url-redirect/</link>
      <pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/note/2018/03/05/crawler-url-redirect/</guid>
      <description>使用python+requests爬虫时常常遇到请求URL地址变化（返回的URL地址不再是请求时的地址），这些很大可能是网页被重定向导致。所谓重定向(Redirect)就是通过各种方法将各种网络请求重新转到其它位置（URL）。每个网站主页是网站资源的入口，当重定向发生在网站主页时，如果不能正确处理就很有可能会错失这整个网站的内容。
 爬取网页时主要三种重定向的情况
 服务器端重定向，在服务器端完成，一般来说爬虫可以自适应，是不需要特别处理的，如响应代码301（永久重定向）、302（暂时重定向）等。具体来说，可以通过requests请求得到的response对象中的url、status_code两个属性来判断。当status_code为301、302或其他代表重定向的代码时，表示原请求被重定向；当response对象的url属性与发送请求时的链接不一致时，也说明了原请求被重定向且已经自动处理。
 客户端重定向：请求头meta refresh设置，即网页中的&amp;lt;meta&amp;gt;标签声明了网页重定向的链接，这种重定向由浏览器完成，需要编写代码进行处理。例如，某一重定向如下面的html代码第三行中的注释所示，浏览器能够自动跳转，但爬虫只能得到跳转前的页面，不能自动跳转。
  如百度搜索requests后第一个结果地址https://www.baidu.com/link?url=n2d6IqviMKE2UKdm3cJo02edoksu6FX81jzThBQbkehNlFLpXO18Wry6_S3p_sp8&amp;amp;wd=&amp;amp;eqid=9b51b77c000016fb000000045a9ca929这个地址会跳转到http://www.python-requests.org/
&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;0.1;url=http://www.redirectedtoxxx.com/&amp;quot;&amp;gt;&amp;lt;!--本网页会在0.1秒内refresh为url所指的网页--&amp;gt; &amp;lt;meta content=&amp;quot;always&amp;quot; name=&amp;quot;referrer&amp;quot;&amp;gt; &amp;lt;script&amp;gt;try{if(window.opener&amp;amp;&amp;amp;window.opener.bds&amp;amp;&amp;amp;window.opener.bds.pdc&amp;amp;&amp;amp;window.opener.bds.pdc.sendLinkLog){window.opener.bds.pdc.sendLinkLog();}}catch(e) {};var timeout = 0;if(/bdlksmp/.test(window.location.href)){var reg = /bdlksmp=([^=&amp;amp;]+)/,matches = window.location.href.match(reg);timeout = matches[1] ? matches[1] : 0};setTimeout(function(){window.location.replace(&amp;quot;http://www.python-requests.org/&amp;quot;)},timeout);window.opener=null;&amp;lt;/script&amp;gt; &amp;lt;noscript&amp;gt; &amp;lt;META http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;0;URL=&#39;http://www.python-requests.org/&#39;&amp;quot;&amp;gt; &amp;lt;/noscript&amp;gt;  这种行为发生在客户端（浏览器），所以使用python requests 时不能实现自动跳转，返回结果仍然是原始URL地址。
import requests url = &#39;https://www.baidu.com/link?url=n2d6IqviMKE2UKdm3cJo02edoksu6FX81jzThBQbkehNlFLpXO18Wry6_S3p_sp8&amp;amp;wd=&amp;amp;eqid=9b51b77c000016fb000000045a9ca929&#39; r = requests.get(url) r.status_code #200 r.url #&#39;https://www.baidu.com/link?url=n2d6IqviMKE2UKdm3cJo02edoksu6FX81jzThBQbkehNlFLpXO18Wry6_S3p_sp8&amp;amp;wd=&amp;amp;eqid=9b51b77c000016fb000000045a9ca929&#39;  解决方法：获取真正要请求的URL，再重新requests
# xpath(&#39;//meta[@http-equiv=&amp;quot;refresh&amp;quot; and @content]/@content&#39;)提取出content的值 # 正则表达式提取出重定向的url import requests import re from lxml import etree def find_RealURL(url): r = requests.</description>
    </item>
    
    <item>
      <title>widgetframe辅助R交互式展示</title>
      <link>/post/2018/02/20/display-htmlwidget-use-widgetframe/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/02/20/display-htmlwidget-use-widgetframe/</guid>
      <description>R的画图包千千万，其中有许多优秀的交互式画图、数据展示包，如leaflet; dygraphs; DT等。但是如果要线上使用这些结果常常存在JS加载冲突的问题，因为加载这些包同时要引入许多相关的JS库
 其中一个解决方法就是把相关的R展示模块当作一个iframe来处理，具体操作已有包widgetframe，使用frameWidget将输出结果进行包装
widgetframe简介 使用pym.js来实现iframe的潜入，主要函数：
 frameableWidget添加代码到html控件并可作为iframe的插入源 frameWidget在html中添加html控件   The goal of widgetframe is to be able to embed widgets inside iframes using NPR’s Pymjs library for responsive iframes. This package provides two functions frameableWidget, and frameWidget. The frameableWidget is used to add extra code to a htmlwidget which allows it to be rendered inside a responsive iframe. The frameWidget returns a htmlwidget which displays content of another htmlwidget inside a responsive iframe.</description>
    </item>
    
  </channel>
</rss>